import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
//ovdje mozete dodati importe ukoliko vam treba neki koji vec nije ukljucen

public class CetverougaoTest{
    //klasu Cetverougao mozete koristiti direktno u kodu testa (tj. bez importa)
    
    // ovaj test provjerava konstruktor
    @Test
    void test1(){
        try {
            Cetverougao c = new Cetverougao(-1.,-2.,"plava");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(-1.,2.,"plava");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(1.,-2.,"plava");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(1.,2.,"");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(1.,2.,null);
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(0.,2.,"zuti");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(3.,0.,"zuti");
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        try {
            Cetverougao c = new Cetverougao(1,2,"zuti");
            assertTrue(true);
        } catch(IllegalArgumentException e) {
            assertTrue(false);
        }
    }
    
    // ovaj test provjerava metodu dajPovrsinu
    @Test
    void test2(){
        Cetverougao c = new Cetverougao(2.,3.,"zeleni");
        assertEqual(6, c.dajPovrsinu());
        c = new Cetverougao(100,100,"plavi");
        assertEqual(100000, c.dajPovrsinu());
    }
    
    // ovaj test provjerava metodu skaliraj
    @Test
    void test3(){
        try {
            Cetverougao c = new Cetverougao(1.,2.,"zuti");
            c.skaliraj(-2);
            assertTrue(false);
        } catch(IllegalArgumentException e) {
            assertTrue(true);
        }
        Cetverougao c = new Cetverougao(10.,10.,"zuti");
        c.skaliraj(2);  // obim je 80 poslije ovog dakle moze
        assertEqual(20, c.getSirina());
        assertEqual(20, c.getVisina());
        c.skaliraj(1.5); // obim postaje 30*4=120 dakle nista
        assertEqual(20, c.getSirina());
        assertEqual(20, c.getVisina());
    }
    
    // ovaj test provjerava metodu opisi
    @Test
    void test4(){
        Cetverougao c = new Cetverougao(2.,3.,"zeleni");
        assertEqual("Cetverougao: sirina=3, visina=2, boja=zeleni", c.opisi());
        c = new Cetverougao(8.,2.,"zuti");
        assertEqual("Cetverougao: sirina=2, visina=8, boja=zuti", c.opisi());

    }
    
}
