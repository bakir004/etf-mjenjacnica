func generateRandomName(length int) string {
	const letters = "abcdefghijklmnopqrstuvwxyz"
	var sb strings.Builder
	for i := 0; i < length; i++ {
		sb.WriteByte(letters[rand.Intn(len(letters))])
	}
	return sb.String()
}

var headerPath string
var pchPath string
var changedForReal bool = true

func compileUserCode(userID, userCode string, mainCode string, changed bool) CodeResponse {
	// dirPath := "C:\\Users\\Bakir\\AppData\\Local\\Temp"
	// files, err := os.ReadDir(dirPath)
	// if err != nil {
	// 	fmt.Println("Error reading directory:", err)
	// 	return CodeResponse{"", "Reading files error"}
	// }
	// fileCount := 0
	// printFileCount := func(sleep bool) {
	// 	if sleep {
	// 		time.Sleep(2 * time.Second)	
	// 	}
	// 	files, err = os.ReadDir(dirPath)
	// 	fileCount = 0
	// 	for _, file := range files {
	// 		if !file.IsDir() {
	// 			fileCount++
	// 		}
	// 	}
	// 	fmt.Printf("Number of files in '%s': %d\n", dirPath, fileCount)
	// }
	// printFileCount(false)
	
	// if changedForReal {
	// 	println("Compiling user code...")
	// 	changedForReal = false
	// 	headerFile, headerErr := os.CreateTemp("", "*.h")
	// 	if headerErr != nil {
	// 		return CodeResponse{"", fmt.Sprintf("Failed to create temp header file: %v", headerErr)}
	// 	}
	// 	headerPath = headerFile.Name()
	// 	defer headerFile.Close()

	// 	if _, err := headerFile.WriteString(userCode); err != nil {
	// 		os.Remove(headerPath)
	// 		return CodeResponse{"", fmt.Sprintf("Failed to write header code to file: %v", err)}
	// 	}

	// 	pchFile, pchErr := os.CreateTemp("", "*.h")
	// 	if pchErr != nil {
	// 		os.Remove(headerPath)
	// 		return CodeResponse{"", fmt.Sprintf("Failed to create precompiled header file: %v", pchErr)}
	// 	}
	// 	pchPath = pchFile.Name()
	// 	defer pchFile.Close()

	// 	pchCode := fmt.Sprintf("#include <iostream>\n#include <stdexcept>\n#include <vector>\n#include <string>\n#include \"%s\"\n", headerPath)
	// 	if _, err := pchFile.WriteString(pchCode); err != nil {
	// 		os.Remove(headerPath)
	// 		os.Remove(pchPath)
	// 		return CodeResponse{"", fmt.Sprintf("Failed to write preprocessing directives to precompiled header file: %v", err)}
	// 	}
	// }

	mainFile, mainErr := os.CreateTemp("", "*.cpp")
	if mainErr != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		return CodeResponse{"", fmt.Sprintf("Failed to create temp main file: %v", mainErr)}
	}
	mainPath := mainFile.Name()
	defer mainFile.Close()
	
	if _, err := mainFile.WriteString(mainCode); err != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		return CodeResponse{"", fmt.Sprintf("Failed to write main code to file: %v", err)}
	}
	
	mainObjectFile := strings.TrimSuffix(mainPath, ".cpp") + ".o"
	
	compilePch := exec.Command("g++", OPTIMIZATION_LEVEL, "-c", "-x", "c++-header", "-o", "pch.gch", pchPath)

	var compilePchErrBuf bytes.Buffer
	compilePch.Stderr = &compilePchErrBuf
	if err := compilePch.Run(); err != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		return CodeResponse{"", fmt.Sprintf("Failed to compile precompiled header: %s", compilePchErrBuf.String())}
	}

	includeHeaderInMain := exec.Command("g++", OPTIMIZATION_LEVEL, "-include", pchPath, "-c", mainPath, "-o", mainObjectFile)

	var includeHeaderErrBuf bytes.Buffer
	includeHeaderInMain.Stderr = &includeHeaderErrBuf
	if err := includeHeaderInMain.Run(); err != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		os.Remove(strings.TrimSuffix(pchPath, ".h") + ".gch")
		return CodeResponse{"", fmt.Sprintf("Failed to include header functions in main: %s", includeHeaderErrBuf.String())}
	}

	executableFileName := generateRandomName(10)
	compileMain := exec.Command("g++", OPTIMIZATION_LEVEL, mainObjectFile, "-o", executableFileName)

	var executableFilePath string

	if runtime.GOOS == "windows" {
		executableFileName = "./" + executableFileName
		executableFilePath = filepath.Dir(mainObjectFile) + "\\" + executableFileName + ".exe"
	} else {
		executableFilePath = filepath.Dir(mainObjectFile) + "/" + executableFileName
	}

	var compileMainErrBuf bytes.Buffer
	compileMain.Stderr = &compileMainErrBuf
	if err := compileMain.Run(); err != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		os.Remove(strings.TrimSuffix(pchPath, ".h") + ".gch")
		os.Remove(mainObjectFile)
		os.Remove(executableFilePath)
		return CodeResponse{"", fmt.Sprintf("Failed to link and compile main: %s", compileMainErrBuf.String())}
	}

	ctx, cancel := context.WithTimeout(context.Background(), TIMEOUT_SECONDS*time.Second)
	defer cancel()
	
	runCmd := exec.CommandContext(ctx, executableFileName)
	var outBuf, errBuf bytes.Buffer
	runCmd.Stdout = &outBuf
	runCmd.Stderr = &errBuf

	executionError := runCmd.Run()

	if ctx.Err() == context.DeadlineExceeded {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		os.Remove(strings.TrimSuffix(pchPath, ".h") + ".gch")
		os.Remove(mainObjectFile)
		os.Remove(executableFilePath)
		return CodeResponse{"", fmt.Sprintf("Execution timed out after %d seconds", TIMEOUT_SECONDS)}
	}
	if executionError != nil {
		// os.Remove(headerPath)
		// os.Remove(pchPath)
		os.Remove(mainPath)
		os.Remove(strings.TrimSuffix(pchPath, ".h") + ".gch")
		os.Remove(mainObjectFile)
		os.Remove(executableFilePath)
		return CodeResponse{"", fmt.Sprintf("Execution Error %s", errBuf.String())}
	}
	removeFileWithDelay := func(filePath string) {
		time.Sleep(1 * time.Second)

		err := os.Remove(filePath)
		if err != nil {
			fmt.Println("Error removing file:", filePath, err)
		}
	}
 
	// go removeFileWithDelay(headerPath)
	// go removeFileWithDelay(pchPath)
	go removeFileWithDelay(mainPath)
	go removeFileWithDelay(mainObjectFile)
	// go printFileCount(true)
	
	return CodeResponse{outBuf.String(), errBuf.String()}
}